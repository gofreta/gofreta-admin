button, .btn {
    $lineHeight: 20px;
    $vPadding: ($btnHeight - $lineHeight) / 2;

    position: relative;
    display: inline-block;
    vertical-align: top;
    border: 0;
    outline: none;
    cursor: pointer;
    margin: 0;
    max-width: 100%;
    padding: $vPadding 20px;
    line-height: $lineHeight;
    text-decoration: none;
    font-family: $baseFont;
    font-size: $baseFontSize;
    font-weight: bold;
    color: $txtColor;
    background: #fff;
    text-align: center;
    @include user-select(none);
    @include border-radius($baseRadius);
    @include transition(color 0.2s, background 0.2s);
    &:after { // universal hover overlay
        content: "";
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(#fff, 0.2);
        @include hide;
        @include border-radius($baseRadius);
        @include transition(opacity 0.2s, visibility 0.2s);
    }
    i, .txt {
        display: inline-block;
        vertical-align: top;
    }
    i {
        font-size: 18px;
        font-weight: normal;
        &:before {
            vertical-align: top;
        }
        & ~ .txt,
        .txt ~ i {
            margin-left: 5px;
        }
    }

    // states
    &:hover {
        &:after {
            @include show;
        }
    }
    &:active {
        padding-top: $vPadding + 2;
        line-height: $lineHeight - 2;
        &:after {
            background: rgba(#fff, 0.15);
            @include show;
        }
    }

    // variations
    &.btn-cons {
        min-width: 150px;
    }
    &.btn-cons-sm {
        min-width: 100px;
    }
    &.btn-cons-lg {
        min-width: 250px;
    }
    &.btn-disabled {
        color: $darkGreyColor;
        background: $greyColor;
        @include pointer-events(none);
    }

    // fill colors
    @each $color in $colorsList {
        &.btn-#{nth($color, 1)} {
            background: nth($color, 2);
            color: nth($color, 3);
            &:hover {
            }
        }
    }

    // transp colors
    &.btn-transp {
        color: #fff;
        background: none;
        line-height: $lineHeight - 2;
        border: 1px solid #fff;
        &:active {
            line-height: $lineHeight - 4;
        }
        &.btn-disabled {
            opacity: 0.5;
        }
        @each $color in $colorsList {
            &.btn-#{nth($color, 1)} {
                border-color: nth($color, 2);
                background: rgba(nth($color, 2), 0.05);
                color: nth($color, 2);
                &:after {
                    display: none;
                }
                &:hover {
                    background: rgba(nth($color, 2), 0.1);
                }
                &:active {
                    background: rgba(nth($color, 2), 0.15);
                }
            }
        }
    }

    // sizes
    &.btn-sm {
        $vPadding: ($smallBtnHeight - $lineHeight) / 2;

        font-size: $baseFontSize - 1;
        padding: $vPadding 10px;
        i {
            font-size: $baseFontSize;
        }
        &:active {
            padding-top: $vPadding + 2;
            line-height: $lineHeight - 2;
        }
        &.btn-transp:active {
            line-height: $lineHeight - 4;
        }
    }
    &.btn-lg {
        $vPadding: ($largeBtnHeight - $lineHeight) / 2;

        font-size: $baseFontSize + 2;
        padding-top: $vPadding;
        padding-bottom: $vPadding;
        &:active {
            padding-top: $vPadding + 2;
            line-height: $lineHeight - 2;
        }
        &.btn-transp:active {
            line-height: $lineHeight - 4;
        }
    }
}

label {
    @extend %clear-after;
    position: relative;
    display: inline-block;
    vertical-align: top;
    margin: 0;
    max-width: 100%;
    em {
        color: $dangerColor;
    }
}

%input {
    $lineHeight: 20px;
    $vPadding: ($btnHeight - $lineHeight) / 2;

    display: inline-block;
    vertical-align: top;
    outline: 0;
    margin: 0;
    line-height: $lineHeight;
    padding: $vPadding 15px;
    border: 1px solid $greyColor;
    font-family: $baseFont;
    font-size: $baseFontSize;
    color: $txtColor;
    width: 200px;
    background: #fff;
    box-sizing: border-box;
    @include placeholder($darkGreyColor);
    @include border-radius($baseRadius);
    @include transition(border-color 0.2s, background 0.2s, color 0.2s);

    // states
    &:focus {
        color: $primaryColor;
        border-color: $primaryColor;
        @include shadowize(rgba($primaryColor, 0.1));
    }
}

input,
textarea,
select {
    @extend %input;
}

textarea {
    min-height: 100px;
    resize: vertical;
}
.rich-editor {
    .ql-toolbar {
        background: $lightGreyColor;
        border-color: $greyColor;
        @include border-top-left-radius($baseRadius);
        @include border-top-right-radius($baseRadius);
    }
    .ql-container {
        border-color: $greyColor;
        background: #fff;
        @include border-radius($baseRadius);
    }
    .ql-picker {
        background: #fff;
        @include border-radius($baseRadius);
        .ql-picker-label {
            border: 0;
            @include border-radius($baseRadius);
        }
        .ql-picker-options {
            border: 0;
            @include border-bottom-left-radius($baseRadius);
            @include border-bottom-right-radius($baseRadius);
        }
    }
    .ql-editor {
        height: 350px;
    }
}

.i18n-ctrls {
    @extend %clear-after;
    display: inline-block;
    vertical-align: top;
    position: absolute;
    z-index: 2;
    width: auto;
    right: 0;
    top: 0;
    border: 1px solid $greyColor;
    @include border-radius($baseRadius);
    .ctrl-item {
        $itemSize: 20px;
        float: left;
        text-decoration: none;
        font-size: $baseFontSize - 3;
        text-transform: uppercase;
        line-height: $itemSize;
        min-width: $itemSize;
        cursor: pointer;
        text-align: center;
        padding: 0 3px;
        background: $lightGreyColor;
        border-left: 1px solid $greyColor;
        @include user-select(none);
        @include transition(background 0.2s, color 0.2s);
        &:first-child {
            border-left: 0px;
            @include border-top-left-radius($baseRadius);
            @include border-bottom-left-radius($baseRadius);
        }
        &:last-child {
            @include border-top-right-radius($baseRadius);
            @include border-bottom-right-radius($baseRadius);
        }
        &:hover {
            background: $greyColor;
        }
        &:active {
            background: $darkGreyColor;
        }
        &.active {
            color: #fff;
            background: $primaryColor;
        }
    }
}

// helper mixin to manage form-group sizes
@mixin group-size($height, $lineHeight: 20px) {
    $vPadding: ($height - $lineHeight) / 2;

    line-height: $lineHeight;
    padding-top: $vPadding;
    padding-bottom: $vPadding;
}

.form-group {
    @extend %block;
    position: relative;
    margin: 0 0 $smallSpacing;
    label {
        font-weight: normal;
        margin: 0 0 5px;
    }
    %input {
        width: 100%;
    }

    // sizes
    &.form-group-sm {
        %input {
            @include group-size($smallBtnHeight);
            padding-left: 10px;
            padding-right: 10px;
        }
        select {
            padding-left: 5px;
            padding-right: 5px;
        }
    }
    &.form-group-lg {
        %input {
            @include group-size($largeBtnHeight);
            font-size: $baseFontSize + 2;
        }
    }

    // checkbox/radio toggles
    input[type="checkbox"],
    input[type="radio"] {
        $checkSize: 22px;

        width: 1px;
        height: 1px;
        display: inline-block;
        vertical-align: middle;
        clear: none;
        position: absolute;
        left: -9999px;
        top: 0;
        opacity: 0;
        & ~ .i18n-ctrls {
            display: table;
            position: relative;
            right: auto;
            left: auto;
            margin-bottom: 10px;
        }
        & ~ label {
            line-height: $checkSize;
            width: auto;
            text-transform: none;
            min-height: $checkSize;
            padding-left: $checkSize + 10px;
            @include user-select(none);
            &:before,
            &:after {
                content: "";
                display: block;
                position: absolute;
                left: 0;
                top: 0;
                cursor: pointer;
                width: $checkSize;
                height: $checkSize;
                text-align: center;
                line-height: $checkSize;
                @include border-radius($baseRadius);
            }
            &:before {
                z-index: 0;
                background: #fff;
                border: 1px solid $greyColor;
                @include transition(background 0.2s, border 0.2s);
            }
            &:after {
                z-index: 1;
                content: "S";
                font-size: $baseFontSize;
                font-family: $iconFont;
                @include hide;
                @include transform(scale(0.5));
                @include transition(color 0.2s, transform 0.1s, opacity 0.1s, visibility 0.1s);
            }
        }
        &[disabled] {
            & ~ label {
                color: $darkGreyColor;
            }
        }
        &[type="radio"] {
            & ~ label {
                &:before {
                    @include border-radius($checkSize);
                }
            }
        }
        &:checked ~ label {
            &:after {
                @include show;
                @include transform(scale(1));
            }
        }
    }

    // checkbox/radio color variations
    @each $color in $colorsList {
        &.form-group-color-#{nth($color, 1)} {
            input[type="checkbox"],
            input[type="radio"] {
                &:checked ~ label {
                    &:before {
                        border-color: nth($color, 2);
                    }
                    &:after {
                        color: nth($color, 2);
                    }
                }
            }
        }
    }

    // switch layout
    &.form-group-switch {
        @include toggle-switch-size();
        input[type="checkbox"],
        input[type="radio"] {
            & ~ label {
                margin-bottom: 0;
                &:before {
                    content: "";
                    cursor: pointer;
                }
                &:after {
                    content: "";
                    cursor: pointer;
                    background: $greyColor;
                    @include show;
                    @include transform(scale(1));
                    @include transition(background 0.2s, transform 0.2s);
                }
            }
            &:checked ~ label {
                &:before {
                    background: $greyColor;
                }
                &:after {
                    background: $darkGreyColor;
                }
            }
        }

        // color variations
        @each $color in $colorsList {
            &.form-group-color-#{nth($color, 1)} {
                input[type="checkbox"],
                input[type="radio"] {
                    &:checked ~ label {
                        &:before {
                            border-color: nth($color, 2);
                            background: nth($color, 2);
                        }
                        &:after {
                            background: nth($color, 3);
                        }
                    }
                }
            }
        }

        // sizes
        &.form-group-sm {
            @include toggle-switch-size(45px, 25px);
        }
        &.form-group-lg {
            @include toggle-switch-size(70px, 38px);
        }
    }

    // success/error states
    .error {
        @extend %block;
        @extend %clear-after;
        font-size: $baseFontSize - 2;
        margin: 0;
        padding: 0;
        color: $dangerColor;
        display: none;
    }
    &.has-error {
        %input {
            color: $dangerColor;
            border-color: $dangerColor;
            &:focus {
                @include shadowize(rgba($dangerColor, 0.1));
            }
        }
        input[type="checkbox"],
        input[type="radio"] {
            & ~ label {
                &:before {
                    border-color: $dangerColor;
                }
            }
        }
        .error {
            display: block;
        }
    }

    // compact layout
    &.form-group-compact {
        $labelHeight: 18px;
        $inputPadding: $labelHeight + 4px;
        label {
            position: absolute;
            z-index: 1;
            top: 0;
            left: 0;
            margin: 0;
            padding: 5px 15px 0;
            font-size: 11.5px;
            line-height: $labelHeight;
            text-transform: uppercase;
            color: $darkGreyColor;
            font-weight: bold;
            @include ellipsis;
            @include user-select(none);
            small {
                font-size: 10px;
            }
        }
        %input {
            z-index: 0;
            padding-top: $inputPadding;
            padding-bottom: 10px;
        }
        select {
            padding-top: $inputPadding + 3px;
            padding-bottom: 9px;
            padding-left: 10px;
        }
        .i18n-ctrls {
            top: 1px;
            right: 1px;
            border-top: 0;
            border-right: 0;
            @include border-top-left-radius(0);
            @include border-bottom-right-radius(0);
            .ctrl-item {
                &:first-child {
                    @include border-top-left-radius(0);
                }
                &:last-child {
                    @include border-bottom-right-radius(0);
                }
            }
        }
        &.disabled {
            %input {
                background: $lightGreyColor;
            }
        }
    }
}
