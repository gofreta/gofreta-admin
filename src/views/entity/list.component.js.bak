import ApiClient         from '@/utils/ApiClient'
import CommonHelper     from '@/utils/CommonHelper'
import SettingsStorage   from '@/utils/SettingsStorage'
import {CollectionModel} from '@/models/CollectionModel'
import {EntityModel}     from '@/models/EntityModel'
import {LanguageModel}   from '@/models/LanguageModel'

// filter fields
import InputFilter  from './filters/InputFilter'
import SelectFilter from './filters/SelectFilter'
import DateFilter   from './filters/DateFilter'

export default {
    name: 'entities-list',
    components: {
        'input-filter':  InputFilter,
        'select-filter': SelectFilter,
        'date-filter':   DateFilter
    },
    props: {
        limit: {
            type: Number,
            default: 15
        },
        syncQueryPage: {
            type: Boolean,
            default: false
        },
        cid: {
            type: String,
            required: true
        }
    },
    data() {
        return {
            collection:       new CollectionModel(),
            showFilters:      false,
            hasActiveFilters: false,
            languages:        [],
            activeLocale:     '',
            listingFields:    [],
            activeFields:     [],
            entities:         []
        }
    },
    watch: {
        'activeFields': function (val) {
            var fieldKeys = [];
            for (let i in val) {
                fieldKeys.push(val[i].key);
            }

            // store the active field
            SettingsStorage.setItem(this.collection.id, fieldKeys);
        },
        'activeLocale': function (val) {
            SettingsStorage.setItem('locale', val);
        },
        '$route.query.page': function (val) {
            if (this.syncQueryPage) {
                this.loadEntities(val);
            }
        }
    },
    computed: {
        orderedActiveFields() {
            var result = [];

            for (let i in this.listingFields) {
                let field = CommonHelper.findArrayObject(this.activeFields, 'key', this.listingFields[i].key);

                if (field) {
                    result.push(field);
                }
            }

            return result;
        }
    },
    methods: {
        /**
         * Inializes all required compoment items.
         */
        init() {
            this.loadLanguages();
            this.loadCollection();
            this.loadEntities();
        },

        /**
         * Returns array of listing fields filtered by the user stored ones (if any).
         *
         * @param  {Array} fields
         * @return {Array}
         */
        filterStoredFields(fields) {
            var storedFields = SettingsStorage.getItem(this.collection.id, []);
            var result = [];

            for (let i in storedFields) {
                let field = CommonHelper.findArrayObject(fields, 'key', storedFields[i]);

                if (field) {
                    result.push(field);
                }
            }

            if (CommonHelper.isEmpty(result)) {
                return fields;
            }

            return result
        },

        /**
         * Loads and initializes component collection model.
         *
         * @param {String}   [cid]
         * @param {Function} [callback]
         */
        loadCollection(cid, callback) {
            cid = cid || this.cid;

            this.$showLoader();

            ApiClient.Collection.getOne(cid).then((response) => {
                this.collection.load(response.data);

                this.listingFields = this.collection.getListingFields();

                this.activeFields = this.filterStoredFields(this.listingFields);

                this.$setDocumentTitle(this.collection.title);

                if (CommonHelper.isFunction(callback)) {
                    callback(response.data);
                }

                this.$emit('collection-loaded', response.data);

                this.$hideLoader();
            }).catch((err) => {
                this.$hideLoader();

                this.$errResponseHandler(err);
            });
        },

        /**
         * Loads and initializes component language models.
         *
         * @param {Function} [callback]
         */
        loadLanguages(callback) {
            this.$showLoader();

            ApiClient.Language.getList(1, 99).then((response) => {
                this.languages = LanguageModel.getInstances(response.data);

                if (this.languages[0]) {
                    this.activeLocale = SettingsStorage.getItem('locale', this.languages[0].locale);
                }

                if (CommonHelper.isFunction(callback)) {
                    callback(response);
                }

                this.$emit('languages-loaded', response.data);

                this.$hideLoader();
            }).catch((err) => {
                this.$hideLoader();

                this.$errResponseHandler(err);
            });
        },

        /**
         * Loads and initializes component entity models.
         *
         * @param {Number}   [page]
         * @param {Number}   [limit]
         * @param {Function} [callback]
         */
        loadEntities(page = 1, limit, callback) {
            limit = limit || this.limit;

            this.$showLoader();

            var filterQueryParams = this.getFilterQueryParams();

            ApiClient.Entity.getList(this.cid, page, limit, filterQueryParams).then((response) => {
                this.entities = EntityModel.getInstances(response.data);

                this.$refs.paging.currentPage = response.headers['x-pagination-current-page'] << 0 || 1;
                this.$refs.paging.totalPages  = response.headers['x-pagination-page-count'] << 0   || 1;

                if (CommonHelper.isFunction(callback)) {
                    callback(response.data);
                }

                this.$emit('entities-loaded', response.data, this.$refs.paging.currentPage);

                this.$hideLoader();
            }).catch((err) => {
                this.$hideLoader();

                this.$errResponseHandler(err);
            });
        },


        /**
         * Toggles table option dropdown.
         */
        toggleTableOptions() {
            this.$refs.tableOptions.toggle();
        },

        /**
         * Toggles table filter panel.
         */
        toggleFilter() {
            if (this.showFilters) {
                this.showFilters = false;

                this.resetFilters();
            } else {
                this.showFilters = true;
            }
        },

        /**
         * Handles filter field change event.
         */
        onFilterChange() {
            this.loadEntities()
        },

        /**
         * Return all filter field compoments.
         *
         * @return {Array}
         */
        getFilterRefs() {
            var result = [];

            if (CommonHelper.isArray(this.$refs.dynamicFilters)) {
                for (let i in this.$refs.dynamicFilters) {
                    result.push(this.$refs.dynamicFilters[i]);
                }
            }

            if (this.$refs.statusFilter) {
                result.push(this.$refs.statusFilter);
            }

            if (this.$refs.modifiedFilter) {
                result.push(this.$refs.modifiedFilter);
            }

            return result;
        },

        /**
         * Resets all filter fields and reloads the table list.
         */
        resetFilters() {
            var filters = this.getFilterRefs();

            for (let i in filters) {
                if (CommonHelper.isFunction(filters[i].reset)) {
                    filters[i].reset();
                }
            }

            this.hasActiveFilters = false;

            this.loadEntities();
        },

        /**
         * Returns and resolve filter field values.
         *
         * @return {Object}
         */
        getFilterQueryParams() {
            var filters = this.getFilterRefs();
            var result = {};

            for (let i in filters) {
                result = Object.assign(result, filters[i].export());
            }

            if (CommonHelper.isEmpty(result)) {
                this.hasActiveFilters = false;
            } else {
                this.hasActiveFilters = true;
            }

            return result;
        }
    }
}































<template>
    <div class="block">
        <table class="table table-shadowize v-align-middle" v-if="activeLocale">
            <thead>
                <tr>
                    <th style="width: 40%" v-for="field in orderedActiveFields">
                        <span class="txt">{{ field.label }}</span>
                        <span class="txt">({{ activeLocale }})</span>
                    </th>
                    <th class="min-width">Status</th>
                    <th class="min-width">Date Modified</th>
                    <th class="min-width txt-right">
                        <div class="header-handle" title="Filters" :class="{'active': showFilters}" @click.prevent="toggleFilter">
                            <span class="header-icon filter-icon">
                                <i class="di di-experiment"></i>
                            </span>
                        </div>

                        <div class="header-handle" title="Options" @click.stop="toggleTableOptions">
                            <span class="header-icon options-icon">
                                <i class="di di-dots-3"></i>
                            </span>

                            <dropdown class="dropdown-compact" ref="tableOptions">
                                <div class="dropdown-item bg-grey">
                                    <div class="form-group form-group-sm">
                                        <select v-model="activeLocale">
                                            <option v-for="lang in languages" :value="lang.locale">
                                                {{ lang.title }} ({{ lang.locale }})
                                            </option>
                                        </select>
                                    </div>
                                </div>

                                <div class="list fields-list">
                                    <div class="dropdown-item" v-for="field in listingFields">
                                        <div class="form-group form-group-sm form-group-color-success form-group-switch">
                                            <input type="checkbox" :value="field" v-model="activeFields" :id="'field_toggle_' + field.key">
                                            <label :for="'field_toggle_' + field.key">{{ field.label }}</label>
                                        </div>
                                    </div>

                                    <div class="dropdown-item" @click.prevent.stop="">
                                        <div class="form-group form-group-sm form-group-switch">
                                            <input type="checkbox" id="prop_toggle_entity_id" disabled checked>
                                            <label for="prop_toggle_entity_id">ID</label>
                                        </div>
                                    </div>
                                    <div class="dropdown-item" @click.prevent.stop="">
                                        <div class="form-group form-group-sm form-group-switch">
                                            <input type="checkbox" id="prop_toggle_entity_status" disabled checked>
                                            <label for="prop_toggle_entity_status">Status</label>
                                        </div>
                                    </div>
                                    <div class="dropdown-item" @click.prevent.stop="">
                                        <div class="form-group form-group-sm form-group-switch">
                                            <input type="checkbox" id="prop_toggle_entity_modified" disabled checked>
                                            <label for="prop_toggle_entity_modified">Date Modified</label>
                                        </div>
                                    </div>
                                </div>
                            </dropdown>
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>
                <!-- Filters START -->
                <tr v-show="showFilters" v-if="activeLocale !== '' && activeLocale !== null">
                    <td class="bg-light-grey p-10" v-for="field in orderedActiveFields">
                        <date-filter
                            v-if="field.type == 'date'"
                            ref="dynamicFilters"
                            :name="'q[data.' + activeLocale + '.' + field.key + ']'"
                            @change="onFilterChange"
                        ></date-filter>
                        <select-filter
                            v-else-if="field.type == 'switch'"
                            ref="dynamicFilters"
                            :name="'q[data.' + activeLocale + '.' + field.key + ']'"
                            :options="[{name: 'True', value: true}, {name: 'False', value: false}]"
                            @change="onFilterChange"
                        ></select-filter>
                        <input-filter
                            v-else
                            ref="dynamicFilters"
                            :name="'q[data.' + activeLocale + '.' + field.key + ']'"
                            @change="onFilterChange"
                        ></input-filter>
                    </td>
                    <td class="bg-light-grey p-10">
                        <select-filter
                            ref="statusFilter"
                            name="q[status]"
                            @change="onFilterChange"
                            :options="[{name: 'Active', value: 'active'}, {name: 'Inactive', value: 'inactive'}]"
                        ></select-filter>
                    </td>
                    <td class="bg-light-grey p-10">
                        <date-filter ref="modifiedFilter" name="q[modified]" @change="onFilterChange"></date-filter>
                    </td>
                    <td class="min-width bg-light-grey p-10">
                        <button
                            class="btn btn-sm btn-cons-sm block"
                            :class="hasActiveFilters ? 'btn-warning' : 'btn-disabled'"
                            @click.prevent="resetFilters"
                        >
                            <div class="txt">Reset filters</div>
                        </button>
                    </td>
                </tr>
                <!-- Filters END -->

                <!-- Border style fix -->
                <tr><td class="p-0" colspan="100"></td></tr>

                <!-- Items START -->
                <tr class="record-row b-t" v-for="entity, i in entities" :key="entity.id" :data-id="entity.id">
                    <td v-for="field in orderedActiveFields">
                        <span class="txt" v-if="entity.data[activeLocale]">
                            <template v-if="field.type == 'date'">
                                {{ $formatDate(entity.data[activeLocale][field.key]) }}
                            </template>
                            <template v-else-if="field.type == 'switch'">
                                <small class="label label-grey">{{ entity.data[activeLocale][field.key] ? 'True' : 'False' }}</small>
                            </template>
                            <template v-else>
                                {{ entity.data[activeLocale][field.key] }}
                            </template>
                        </span>
                    </td>
                    <td class="min-width">
                        <small v-if="entity.status == 'active'" class="label label-success">Active</small>
                        <small v-else-if="entity.status == 'inactive'" class="label label-danger">Inactive</small>
                        <small v-else class="label label-transp">{{ entity.status }}</small>
                    </td>
                    <td class="min-width">{{ $formatDate(entity.modified) }}</td>
                    <td class="min-width txt-right">
                        <slot name="actions" :collection="collection" :entity="entity"></slot>
                    </td>
                </tr>
                <!-- Items END -->

                <tr v-if="!entities.length">
                    <td colspan="100"><span class="txt-hint">No items were found.</span></td>
                </tr>
            </tbody>
        </table>

        <paging class="m-t-20" ref="paging" :updateRoute="syncQueryPage"></paging>
    </div>
</template>

<script src="./list.component.js"></script>
